// Tela com múltiplas abas (uma por instância)
router.get('/wa-multi', async (req, res) => {
  const base = `${req.protocol}://${req.get('host')}`;

  // monta lista simples de instâncias
  const instances = (listInstances?.() || []).map(i => ({
    id: i.id,
    label: i.label || i.id
  }));

  const buttons = instances.map((inst, i) => `
    <button
      class="tab${i === 0 ? ' active' : ''}"
      data-inst="${inst.id}"
      title="Duplo clique para renomear"
    >${inst.label}</button>
  `).join('');

  const html = `<!doctype html>
  <html lang="pt-br">
  <head>
    <meta charset="utf-8" />
    <title>Hub – Admin (multi)</title>
    <style>
      body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; background:#0c1220; color:#e8eefc; margin:0; }
      h1 { font-size:20px; font-weight:600; margin:16px 20px 12px; }
      small { color:#98a2b3; }
      .bar { display:flex; align-items:center; gap:8px; padding:8px 20px 14px; }
      #tabs { display:flex; gap:10px; align-items:center; flex-wrap:wrap; }
      button.tab { background:#ef4444; color:#fff; border:0; border-radius:20px; padding:6px 14px; cursor:pointer; }
      button.tab.active { outline:2px solid #fca5a5; }
      button.plus { background:#334155; color:#fff; border:0; border-radius:20px; padding:6px 12px; cursor:pointer; }
      .wrap { display:grid; grid-template-columns:1fr 1fr; gap:16px; padding:16px 20px 28px; }
      .card { background:#0f172a; border:1px solid #1e293b; border-radius:16px; padding:14px; }
      .btn { background:#3b82f6; color:#fff; border:0; border-radius:8px; padding:8px 12px; cursor:pointer; }
      .btn.gray { background:#334155; }
      textarea { width:100%; min-height:240px; background:#0b1220; border:1px solid #1e293b; color:#e8eefc; border-radius:12px; padding:12px; }
      .qr { display:flex; align-items:center; justify-content:center; height:320px; border:1px dashed #334155; border-radius:12px; color:#9aa4b2; }
      a, a:visited { color:#60a5fa; }
    </style>
  </head>
  <body>
    <h1>Hub – Admin <small>(multi)</small></h1>
    <div class="bar">
      <small>Os botões abaixo são as “abas”. Dê <b>duplo clique</b> para renomear.</small>
    </div>

    <div id="tabs">${buttons}<button class="plus" id="open-classic">+</button></div>

    <div class="wrap">
      <div class="card">
        <h3>Status</h3>
        <div style="display:flex; gap:8px; margin-bottom:10px">
          <button id="btn-connect" class="btn">Conectar</button>
          <button id="btn-disconnect" class="btn gray">Desconectar</button>
          <button id="btn-clear" class="btn gray">Limpar sessão</button>
        </div>
        <textarea id="status" readonly>{"ok": true}</textarea>
      </div>

      <div class="card">
        <h3>QR Code</h3>
        <div id="qr-area" class="qr">Aguardando geração do QR…</div>
        <p style="color:#9aa4b2; font-size:12px; margin-top:10px">
          iPhone: Ajustes → Dispositivos conectados → Conectar um dispositivo. Android:
          “Conectar um dispositivo” no WhatsApp → escaneie o QR.
        </p>
      </div>
    </div>

    <script>
      const base = ${JSON.stringify(base)};
      let current = ${JSON.stringify(instances[0]?.id || '')};

      async function post(url, body) {
        const r = await fetch(url, {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify(body || {})
        });
        return r.json();
      }

      // Renomear aba por duplo clique
      const $tabs = document.getElementById('tabs');
      $tabs.addEventListener('dblclick', async (ev) => {
        const btn = ev.target.closest('button.tab');
        if (!btn) return;
        const id = btn.dataset.inst;
        const atual = btn.textContent.trim();
        const label = prompt('Novo nome para esta aba:', atual);
        if (!label || label === atual) return;

        try {
          const res = await post(\`\${base}/api/hub/instances/\${encodeURIComponent(id)}/label\`, { label });
          if (res && res.ok) {
            btn.textContent = label;
          } else {
            alert('Não consegui renomear: ' + (res?.error || 'erro'));
          }
        } catch (e) {
          alert('Erro de rede ao renomear: ' + e.message);
        }
      });

      // Trocar de aba (click)
      $tabs.addEventListener('click', (ev) => {
        const btn = ev.target.closest('button.tab');
        if (!btn) return;
        document.querySelectorAll('#tabs .tab').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        current = btn.dataset.inst;
        // aqui você pode disparar refresh de status/QR para 'current'
      });

      // Exemplos (stubs) — adapte para sua API de conectar/limpar
      document.getElementById('btn-connect').onclick    = () => alert('Conectar ' + current);
      document.getElementById('btn-disconnect').onclick = () => alert('Desconectar ' + current);
      document.getElementById('btn-clear').onclick      = () => alert('Limpar sessão ' + current);
    </script>
  </body>
  </html>`;

  res.type('html').send(html);
});
